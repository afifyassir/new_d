# Tox is a generic virtualenv management and test command line tool. Its goal is to
# standardize testing in Python. We will be using it extensively in this course.

# Using Tox we can (on multiple operating systems):
# + Eliminate PYTHONPATH challenges when running scripts/tests
# + Eliminate virtualenv setup confusion
# + Streamline steps such as model training, model publishing

# This section is for pytest configuration. log_cli_level=WARNING sets the logging level
# for the command line to WARNING, which means only warnings and errors will be logged.
[pytest]
log_cli_level=WARNING

#This section is for tox configuration. envlist specifies the environments that tox will run when
# tox typed in the command line. skipsdist = True tells tox not to package the source distribution of the project.
[tox]
envlist = test_package, checks, test_app, checks_app
skipsdist = True

# This section is for configuring the test environments.
# install_command = pip install {opts} {packages} specifies the command to install dependencies.
[testenv]
install_command = pip install {opts} {packages}

# This section configures the test_package environment. It specifies the dependencies for
# the environment, sets some environment variables, and defines the commands to run.
[testenv:test_package]
deps =
	-rrequirements/test_requirements.txt

setenv =
	PYTHONPATH=.
	PYTHONHASHSEED=0

commands=
	python model/train_pipeline.py
	pytest \
	-s \
	-vv \
	{posargs:tests/}

# This section configures the train environment. It reuses the dependencies and environment
# variables from the test_package environment and defines the command to run.
[testenv:train]
envdir ={toxworkdir}/test_package
# This line tells tox to use the same dependencies as test_package for the train environment.
deps =
     {[testenv:test_package]deps}

setenv =
	{[testenv:test_package]setenv}
commands=
	python model/train_pipeline.py

# This section configures the checks environment. It specifies the dependencies and the commands to run.
# The commands include flake8 for style guide enforcement, isort for sorting imports, black for code formatting,
# and mypy for type checking.
[testenv:checks]
# This line tells tox to create a new virtual environment for the checks environment in the .tox/checks directory.
envdir = {toxworkdir}/checks
deps =
	-rrequirements/typing_requirements.txt
commands =
	flake8 model tests
	isort model tests
	black model tests
	{posargs:mypy model}


# [testenv:test_app] and [testenv:run] configure the test_app and run environments respectively.
# They are similar to the test_package and train environments but for the application code.
# The line commands = python model/train_pipeline.py pytest -s -vv {posargs:tests/} specifies the commands that
# tox will run in the test_package environment. First, it runs python model/train_pipeline.py to train the model.
# Then, it runs pytest -s -vv {posargs:tests/} to run the tests. The -s option tells pytest to print any print statements
# or logging output to the console, and the -vv option makes pytest's output more verbose. {posargs:tests/} tells pytest
# to run the tests in the tests/ directory, unless other arguments are passed to tox on the command line.
[testenv:test_app]
deps =
	-rrequirements/test_requirements.txt

# The key "setenv" helps us set two environment variables. PYTHONPATH=. adds the current directory
# to the Python path, and PYTHONHASHSEED=0 makes the hash values of Python objects (like strings and dictionaries)
# consistent across runs. This can be useful for making tests deterministic if they rely on the hash values of objects.
setenv =
	PYTHONPATH=.
	PYTHONHASHSEED=0

# {posargs:tests/} is a special tox syntax that allows you to pass additional arguments to pytest
# from the command line when you run tox. If you don't provide any additional arguments,
# it defaults to tests/, which tells pytest to run all tests in the tests/ directory.
commands=
	pytest \
	-vv \
	{posargs:app/tests/}

# This line tells tox to use the same virtual environment as test_package for the train environment.
# This can save time and disk space by avoiding the need to create a new virtual environment and install the same
# dependencies again.
[testenv:run]
envdir = {toxworkdir}/test_app
# This line tells tox to use the same dependencies as test_app for the run environment.
deps =
	{[testenv:test_app]deps}
# This line tells tox to use the same environment variables as test_package for the train environment.
setenv =
	{[testenv:test_app]setenv}

commands=
	python app/main.py

# This section configures the checks_app environment. It is similar to the checks environment but for the application code.
[testenv:checks_app]
envdir = {toxworkdir}/checks_app
deps =
	-rrequirements/typing_requirements.txt
commands =
	flake8 app
	isort app
	black app
	{posargs:mypy app}

# This section is for flake8 configuration. exclude specifies the directories and files to exclude
# from checking. max-line-length = 120 sets the maximum allowed line length to 120 characters.
[flake8]
exclude = .git,__pycache__,__init__.py,.mypy_cache,.pytest_cache,.venv,alembic
max-line-length = 120